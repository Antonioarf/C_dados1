{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Projeto 1 - Ciência dos Dados"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nome: Antonio Fonseca"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pergunta (s) a ser respondida"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ex.: O modelo de desenvolvimento dos paises emergentes tende a tornar melhor ou pior o aproveitamento dos recursos naturais dos paises?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explicação da hipótese e mecanismo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Em um cenario ideal, com o investimento na industrializacao dos paises membros do BRICS (Brasil, Russia, India, China e Africa do Sul) o aumento no consumo de recursos naturais deveria ser mais lendo do que no restante do mundo. \n",
    "\n",
    "Para comprovar ou negar a hipotese original, irei contrapor dados globais e dos paises membros do grupo em dois fatores: porcentagem da terra ainda preservado com floresta, e a importancia na agricultura no PIB. A principio ambas as grandezas deverão diminuir, porém a segunda em taxa maior que a primeira"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bases de dados usadas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Todas as bases de dados utilizadas para este trabalho foram retiradas do link: https://www.gapminder.org/data/ estando denominadas pelo provedor como \"Forest Cover\" (https://www.fao.org/forestry/sofo/en/) e \"Agriculture (% of GDP)\" (https://data.worldbank.org/indicator/NV.AGR.TOTL.ZS)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Análise de dados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Antonio Fonseca\\Desktop\\Insper\\2 SEMESTRE INSPER\\Ciencia dos dados\\New folder\\C_dados1\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "dados_mata = pd.read_excel('forest_coverage_percent.xlsx')\n",
    "dados_agri = pd.read_excel('agriculture_percent_of_gdp.xlsx')\n",
    "print(os.getcwd())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Agora é necessario limpar cada um dos arquivos, começando pelo quediz respeito a area de florestas, que será referenciado como mata_, o crecimento urbano como cres_ e o papel da agricultura como agri_, sendo todos seguidos com diferentes variações dependendo da etapa "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "mata_index = dados_mata.set_index('country')\n",
    "agri_index = dados_agri.set_index('country')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "Brics = ['Brazil','Russia', 'India', 'China', 'South Africa']\n",
    "mata_index.loc[:,\"BRICS\"] = \"não\"\n",
    "mata_index.loc[Brics, \"BRICS\"] = \"sim\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1990</th>\n",
       "      <th>2011</th>\n",
       "      <th>2015</th>\n",
       "      <th>BRICS</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>2.07</td>\n",
       "      <td>2.07</td>\n",
       "      <td>2.07</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>28.80</td>\n",
       "      <td>28.30</td>\n",
       "      <td>28.20</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>0.70</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.82</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>34.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>48.90</td>\n",
       "      <td>46.80</td>\n",
       "      <td>46.40</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              1990   2011   2015 BRICS\n",
       "country                               \n",
       "Afghanistan   2.07   2.07   2.07   não\n",
       "Albania      28.80  28.30  28.20   não\n",
       "Algeria       0.70   0.81   0.82   não\n",
       "Andorra      34.00  34.00  34.00   não\n",
       "Angola       48.90  46.80  46.40   não"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for e in range(20):\n",
    "    mata_index = mata_index.drop(mata_index.columns[1], axis = 1)\n",
    "\n",
    "mata_index = mata_index.drop(mata_index.columns[2], axis = 1)\n",
    "mata_index = mata_index.drop(mata_index.columns[2], axis = 1)\n",
    "mata_certo = mata_index.drop(mata_index.columns[2], axis = 1)\n",
    "\n",
    "mata_certo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "Brics = ['Brazil','Russia', 'India', 'China', 'South Africa']\n",
    "agri_index.loc[:,\"BRICS\"] = \"não\"\n",
    "agri_index.loc[Brics, \"BRICS\"] = \"sim\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1990</th>\n",
       "      <th>2011</th>\n",
       "      <th>BRICS</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>NaN</td>\n",
       "      <td>23.600</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>35.9</td>\n",
       "      <td>18.200</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>10.4</td>\n",
       "      <td>8.110</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.535</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>16.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             1990    2011 BRICS\n",
       "country                        \n",
       "Afghanistan   NaN  23.600   não\n",
       "Albania      35.9  18.200   não\n",
       "Algeria      10.4   8.110   não\n",
       "Andorra       NaN   0.535   não\n",
       "Angola       16.4     NaN   não"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "for e in range(30):\n",
    "    agri_index = agri_index.drop(agri_index.columns[0], axis = 1)\n",
    "agri_index.head()\n",
    "\n",
    "for e in range(20):\n",
    "    agri_index = agri_index.drop(agri_index.columns[1], axis = 1)\n",
    "agri_index.head()\n",
    "\n",
    "for e in range(6):\n",
    "    agri_index = agri_index.drop(agri_index.columns[2], axis = 1)\n",
    "agri_certo = agri_index\n",
    "agri_certo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1990_agri</th>\n",
       "      <th>2011_agri</th>\n",
       "      <th>BRICS_agri</th>\n",
       "      <th>1990_mata</th>\n",
       "      <th>2011_mata</th>\n",
       "      <th>2015</th>\n",
       "      <th>BRICS_mata</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>NaN</td>\n",
       "      <td>23.600</td>\n",
       "      <td>não</td>\n",
       "      <td>2.07</td>\n",
       "      <td>2.07</td>\n",
       "      <td>2.07</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>35.9</td>\n",
       "      <td>18.200</td>\n",
       "      <td>não</td>\n",
       "      <td>28.80</td>\n",
       "      <td>28.30</td>\n",
       "      <td>28.20</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>10.4</td>\n",
       "      <td>8.110</td>\n",
       "      <td>não</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.81</td>\n",
       "      <td>0.82</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0.535</td>\n",
       "      <td>não</td>\n",
       "      <td>34.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>34.00</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>16.4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>não</td>\n",
       "      <td>48.90</td>\n",
       "      <td>46.80</td>\n",
       "      <td>46.40</td>\n",
       "      <td>não</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             1990_agri  2011_agri BRICS_agri  1990_mata  2011_mata   2015  \\\n",
       "country                                                                     \n",
       "Afghanistan        NaN     23.600        não       2.07       2.07   2.07   \n",
       "Albania           35.9     18.200        não      28.80      28.30  28.20   \n",
       "Algeria           10.4      8.110        não       0.70       0.81   0.82   \n",
       "Andorra            NaN      0.535        não      34.00      34.00  34.00   \n",
       "Angola            16.4        NaN        não      48.90      46.80  46.40   \n",
       "\n",
       "            BRICS_mata  \n",
       "country                 \n",
       "Afghanistan        não  \n",
       "Albania            não  \n",
       "Algeria            não  \n",
       "Andorra            não  \n",
       "Angola             não  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dados = agri_certo.join(mata_certo, how='inner',lsuffix ='_agri', rsuffix ='_mata')\n",
    "dados.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#\n",
    "dados['variacao agricultura']= dados['2011_agri'] / dados['1990_agri']\n",
    "#em funcao do desmatamento, a razao entre as floresta entre esses anos devera ser menor que 1\n",
    "dados['variacao area florestal']= dados['2011_mata'] / dados['1990_mata']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6295131791285974"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dados['variacao agricultura'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0261858634181404"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dados['variacao area florestal'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x279e95e75f8>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dados.boxplot(column='2011_agri', by=\"BRICS_agri\")\n",
    "dados.boxplot(column='2011_mata', by=\"BRICS_agri\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x279e9570ba8>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dados.boxplot(column='variacao agricultura', by=\"BRICS_agri\")\n",
    "dados.boxplot(column='variacao area florestal', by=\"BRICS_agri\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusão:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Com analise feita acima, e com a comparação dos dois pares de graficos do tipo \"boxplote\" podemos concluir que os paises do BRICS vem se tornando de fato mais eficientes para com o uso de recursos naturais, uma vez que, como evidenciado pelo segundo par de graficos, esses paises tiverem, entre 1990 e 2011 uma diminuição mais lenta na dependencia economica da agricultura, porém mostraram uma taxa melhor para a diminuição do desmatamento "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
